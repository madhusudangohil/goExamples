// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

import (
	vehicle "car/vehicle"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDriver is a mock of IDriver interface.
type MockIDriver struct {
	ctrl     *gomock.Controller
	recorder *MockIDriverMockRecorder
}

// MockIDriverMockRecorder is the mock recorder for MockIDriver.
type MockIDriverMockRecorder struct {
	mock *MockIDriver
}

// NewMockIDriver creates a new mock instance.
func NewMockIDriver(ctrl *gomock.Controller) *MockIDriver {
	mock := &MockIDriver{ctrl: ctrl}
	mock.recorder = &MockIDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDriver) EXPECT() *MockIDriverMockRecorder {
	return m.recorder
}

// DriveCar mocks base method.
func (m *MockIDriver) DriveCar(eCar vehicle.ICar) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DriveCar", eCar)
}

// DriveCar indicates an expected call of DriveCar.
func (mr *MockIDriverMockRecorder) DriveCar(eCar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriveCar", reflect.TypeOf((*MockIDriver)(nil).DriveCar), eCar)
}

// StartCar mocks base method.
func (m *MockIDriver) StartCar(eCar vehicle.ICar) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCar", eCar)
}

// StartCar indicates an expected call of StartCar.
func (mr *MockIDriverMockRecorder) StartCar(eCar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCar", reflect.TypeOf((*MockIDriver)(nil).StartCar), eCar)
}
