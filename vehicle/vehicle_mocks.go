// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle.go

// Package vehicle is a generated GoMock package.
package vehicle

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICar is a mock of ICar interface.
type MockICar struct {
	ctrl     *gomock.Controller
	recorder *MockICarMockRecorder
}

// MockICarMockRecorder is the mock recorder for MockICar.
type MockICarMockRecorder struct {
	mock *MockICar
}

// NewMockICar creates a new mock instance.
func NewMockICar(ctrl *gomock.Controller) *MockICar {
	mock := &MockICar{ctrl: ctrl}
	mock.recorder = &MockICarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICar) EXPECT() *MockICarMockRecorder {
	return m.recorder
}

// Accelarate mocks base method.
func (m *MockICar) Accelarate(speed float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accelarate", speed)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Accelarate indicates an expected call of Accelarate.
func (mr *MockICarMockRecorder) Accelarate(speed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accelarate", reflect.TypeOf((*MockICar)(nil).Accelarate), speed)
}

// Brake mocks base method.
func (m *MockICar) Brake() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Brake")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Brake indicates an expected call of Brake.
func (mr *MockICarMockRecorder) Brake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Brake", reflect.TypeOf((*MockICar)(nil).Brake))
}

// Start mocks base method.
func (m *MockICar) Start() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockICarMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockICar)(nil).Start))
}

// Stop mocks base method.
func (m *MockICar) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockICarMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockICar)(nil).Stop))
}
